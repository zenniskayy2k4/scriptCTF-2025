import z3

bytecode_hex = "600001000000600103000000300001600215000000200002100379000000500003280a000060000200000060010b000000200001600213000000300002100390000000500003280a000060000d00000060010e0000002000016002110000002000021003df000000500003280a000060000e0000006001100000002000016002120000003000021003f9000000500003280a000060000400000060010e00000020000160021100000020000210031d010000500003280a000060000200000060010c00000020000160020d000000300002100397000000500003280a0000600004000000600106000000300001600209000000200002100349000000500003280a00006000100000006001150000003000016002160000002000021003e2000000500003280a000060000300000060010c00000030000160021300000030000210035f000000500003280a000060000800000060010b000000300001600213000000300002100370000000500003280a0000600002000000600103000000300001600206000000300002100327000000500003280a0000600004000000600107000000300001600208000000200002100377000000500003280a000060000200000060010f00000020000160021400000030000210039b000000500003280a0000600008000000600111000000200001600214000000200002100358010000500003280a0000600001000000600102000000300001600208000000300002100375000000500003280a000060000900000060010c000000200001600214000000300002100314000000500003280a000060000400000060010f00000020000160021500000020000210031e010000500003280a000060000600000060010800000030000160021100000020000210038a000000500003280a000060000600000060010c0000002000016002140000003000021003e5000000500003280a000060000800000060010d00000030000160020f00000030000210033d000000500003280a000060000b000000600111000000200001600215000000200002100308010000500003280a000060000100000060010200000020000160020e00000020000210031a010000500003280a00006000030000006001040000002000016002160000003000021003d3000000500003280a000060000000000060010600000020000160020f000000200002100312010000500003280a000060000700000060010c0000002000016002160000003000021003de000000500003280a000060000100000060010400000020000160020e0000003000021003d2000000500003280a000060000300000060011000000030000160021100000030000210031a000000500003280a000060000e00000060010f0000003000016002120000002000021003b9000000500003280a000060000a00000060011100000030000160021300000030000210035b000000500003280a000060000300000060010500000030000160020c00000030000210035f000000500003280a0000600002000000600115000000200001600216000000200002100319010000500003280a000060000400000060010f00000020000160021100000030000210039d000000500003280a000060000300000060010c000000200001600210000000300002100339000000500003280a000060000700000060010f000000300001600213000000300002100353000000500003280a000060000200000060010500000030000160020900000030000210031c000000500003280a0000600002000000600114000000300001600216000000200002100378000000500003280a00006000030000006001060000002000016002080000003000021003e7000000500003280a000060000600000060010b000000300001600212000000300002100356000000500003280a000060000300000060010f0000002000016002110000003000021003da000000500003280a000060000000000060010b000000300001600212000000300002100307000000500003280a000060000900000060010c000000200001600211000000300002100310000000500003280a000060000800000060010c00000020000160020f00000020000210031c010000500003280a00006000000000006001100000002000016002150000002000021003c7000000500003280a0000600001000000600105000000300001600212000000200002100397000000500003280a000060000a000000600114000000300001600215000000200002100333000000500003280a000060000b00000060010c00000020000160020e0000003000021003a7000000500003280a000060000200000060010900000030000160020c000000300002100370000000500003280a000060000400000060010600000020000160020a0000003000021003a4000000500003280a000060000500000060010b00000020000160020f000000200002100337010000500003280a000060000400000060010900000020000160020a000000200002100317010000500003280a000060000700000060010800000030000160020a000000200002100377000000500003280a000060000300000060010b0000002000016002150000002000021003c5000000500003280a000060000b00000060010f000000300001600214000000300002100354000000500003280a000060000000000060010500000030000160020800000030000210031a000000500003280a000060000200000060010600000030000160021600000020000210038a000000500003280a000060000900000060010f000000300001600214000000300002100338000000500003280a0000600004000000600112000000200001600215000000200002100312010000500003280a000060000300000060010b00000030000160020e0000002000021003a1000000500003280a00006000070000006001090000002000016002100000003000021003f7000000500003280a000060000500000060010b00000030000160021000000030000210035f000000500003280a000060000500000060010700000020000160020e0000003000021003e1000000500003280a000060000800000060010e00000030000160020f00000030000210033c000000500003280a000060000700000060010a00000030000160020e00000020000210033c000000500003280a0000600003000000600104000000200001600208000000200002100315010000500003280a0000600003000000600108000000300001600214000000300002100331000000500003280a000060000900000060010b000000200001600214000000200002100304010000500003280a000060000100000060010b000000300001600215000000300002100319000000500003280a00006000030000006001080000002000016002150000002000021003d6000000500003280a0000600003000000600108000000200001600209000000300002100390000000500003280a00001001696969697040280a000040280a000040280a000040280a000040280a000040280a000040280a000040280a0000100100000000ff"
bytecode = bytes.fromhex(bytecode_hex)

FLAG_LEN = 23
flag = [z3.BitVec(f'flag_{i}', 8) for i in range(FLAG_LEN)]

solver = z3.Solver()
for i in range(FLAG_LEN):
    solver.add(z3.And(flag[i] >= 32, flag[i] <= 126))

ip = 0
while bytecode[ip] == 0x60:
    # Đọc 3 index từ 3 lệnh mov_str với offset ĐÚNG
    idx1 = int.from_bytes(bytecode[ip+2:ip+6], 'little')
    idx2 = int.from_bytes(bytecode[ip+8:ip+12], 'little')
    idx3 = int.from_bytes(bytecode[ip+17:ip+21], 'little')
    
    # Lấy 2 toán tử với offset ĐÚNG
    op1 = bytecode[ip+12]
    op2 = bytecode[ip+21]
    
    # Lấy giá trị check với offset ĐÚNG
    check_val = int.from_bytes(bytecode[ip+26:ip+30], 'little')
    
    # Xây dựng biểu thức
    term1 = flag[idx1]
    term2 = flag[idx2]
    term3 = flag[idx3]
    
    temp_expr = (term1 + term2) if op1 == 0x20 else (term1 ^ term2)
    final_expr = (temp_expr + term3) if op2 == 0x20 else (temp_expr ^ term3)
    
    # Thêm phương trình vào solver
    solver.add(final_expr == check_val)
    
    # Di chuyển con trỏ lệnh đến đầu khối tiếp theo
    ip += 37

# Giải
if solver.check() == z3.sat:
    model = solver.model()
    result = [model.evaluate(f).as_long() for f in flag]
    flag_str = "".join(map(chr, result))
    print(f"Flag found: scriptCTF{{{flag_str}}}")
else:
    print("Could not find a solution.")